openapi: 3.0.1
info:
  title: Disclosure-Service
  description: >

    # Beschreibung
    
    Informationen bezüglich der Offenlegung(Disclosure) sollen nach OSP geschrieben und in Responses zurückgemeldet werden. 

    # Rahmenbedingungen
    
    Welche Rahmenbedingungen sind zu beachten, damit der Service genutzt werden kann, insbesondere:
      - Rechte: Der aufrufende User muss in ESBConfig die Berechtigung zum Aufruf von Service 'DynsBA'/Domäne OSP besitzen. 
        Zur Abfrage von Daten zu Mitarbeitern (Organkennzeichen gesetzt) benötigt der zugeordnete SUSer das Privileg 'MITARBEITER'. 
        Falls das Zugriffsschutz-Kennzeichen einer gesuchten Personen gesetzt ist
        (ZUGRIFFSSCHUTZ_KZ = 'J' ), benötigt der Anwender das Privileg 'ZUGRIFF-PERS'.
      - Verfügbarkeitszeiten: Wann ist der Service verfügbar?
      - Offene Detailpunkte:
      - Rechte: Im Zielzustand sollte mit der Vergabe des Rechts zur Nutzung des Service auch alle darunterliegenden Rechte, die erforderlich sind, angelegt werden (Service-Gedanke)
      - Serviceparameter: weitergehende Regelungen wie Quotas etc. sind nicht Teil der Swagger-Dokumentation, sondern Parameter im API-Gateway, werden dort gepflegt und publiziert

    # Domäne/Subdomäne
      - der Service ist der fachlichen Domäne 'Customer' zugeordnet.
     
    # IT-System(-nummer)
      -  IT-System: nicht bekannt
     
    # Offene Detailpunkte
      - Welche Eigenschaften erbt der Service von dem System?
      - Werden diese Eigenschaften beim Service im API-Verzeichnis mit publiziert (Komfort) und/oder das IT-System verlinkt.
      - Wird die Systemnummer publiziert?

    # Schutzniveau
    
    Schutz-Niveau des IT-Systems oder geringer

    # Offene Detailpunkte
    
    Welche Ausprägungen bilden wir da ab? Mögliche Quellen: Statusausprägungen,
    die ApiOmat im Zuge Versionierung an bietet und/oder Packaging Konzepte z.B. für Python.
    
    # Release-Notes
    
      - 2020-05-14: v0.9.71  Datumsformat ISO yyyy-MM-dd
      - 2020-05-28: v0.9.72  Typ Boolean eingefügt.
      - 2020-06-03: v0.9.73  RequestBodies jetzt mit schema:type: object
      - 2020-06-22: v0.1.0   gen_con_type und gen_con_class Felder aus Refusal entfernt. Health hinzugefügt.
      - 2020-06-22: v0.1.1   Request Objekten für den Code-Generator optimiert.
      - 2020-07-08: v0.1.2   Umstellung auf Patch anstelle Put. Diverse Verbesserungen.
      - 2020-07-09: v0.1.3   CustomerId als Query-Parameter. Tags und Endpoints umbenannt. Enum des Occurence eingefügt. Required geadded.
      - 2020-07-13: v0.1.4   Refuse -> Refusal. Example Refusal angepasst.
      - 2020-07-16: v0.1.5   Beschreibungen, Model-Tags geändert.
      - 2020-07-17: v0.1.6   Links -> self in allen Responses entfernt da keine GET Operationen beauftragt. 
      - 2020-07-17: v0.1.7   Examples, Response-Code-Texts, Model-Tags, Zeilenumbruch in Release-Notes Markdown angepasst.

    # Status
    
        Version 0.1.7:   Examples, Response-Code-Texts, Model-Tags, Zeilenumbruch in Release-Notes Markdown angepasst.
  version: 0.1.7
  termsOfService: /agb
  contact:
    name: Nicholas Trawniczek
    url: 'http://api.lbbw.de'
    email: Nicholas.Trawniczek@lbbw.de
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-keywords: >-
    Prüfungsergebnis, Offenlegungspflicht, Ausnahmetatbestand, Erfolgt, Verweigert, Offenlegung
  x-logo:
    altText: LBBW logo
    url: 'https://www.lbbw.de/res/images/logos/lbbw-logo-darkblue_131586_m.svg'
externalDocs:
  description: Diese Dokumentation basiert auf der Open Api Specification V3.
  url: 'https://github.com/OAI/OpenAPI-Specification'
servers:
  - url: 'https://api.bp.entw.bank.lbbw.sko.de/customer/disclosure-service/'
    description: API-Verzeichnis
  - url: 'https://esb.bp.entw.bank.lbbw.sko.de/customer/disclosure-service/'
    description: ESB-Service Integrationsumgebung
tags:
  - name: occurence_req_model
    x-displayName: OccurenceRequest
    description: >
      <SchemaDefinition schemaRef="#/components/schemas/OccurenceRequest"
      showReadOnly={true} showWriteOnly={true} />
  - name: occurence_resp_model
    x-displayName: OccurenceResponse
    description: >
      <SchemaDefinition schemaRef="#/components/schemas/OccurenceResponse"
      showReadOnly={true} showWriteOnly={true} />
  - name: refusal_req_model
    x-displayName: RefusalRequest
    description: >
      <SchemaDefinition schemaRef="#/components/schemas/RefusalRequest"
      showReadOnly={true} showWriteOnly={true} />
  - name: refusal_resp_model
    x-displayName: RefusalResponse
    description: >
      <SchemaDefinition schemaRef="#/components/schemas/RefusalResponse"
      showReadOnly={true} showWriteOnly={true} />
  - name: requirement_req_model
    x-displayName: RequirementRequest
    description: >
      <SchemaDefinition schemaRef="#/components/schemas/RequirementRequest"
      showReadOnly={true} showWriteOnly={true} />
  - name: requirement_resp_model
    x-displayName: RequirementResponse
    description: >
      <SchemaDefinition schemaRef="#/components/schemas/RequirementResponse"
      showReadOnly={true} showWriteOnly={true} />
x-tagGroups:
  - name: Disclosure
    tags:
      - occurences
      - refusals
      - requirements
  - name: Health
    tags:
      - health
  - name: Models
    tags:
      - occurence_req_model
      - occurence_resp_model
      - refusal_req_model
      - refusal_resp_model
      - requirement_req_model
      - requirement_resp_model
paths:
  '/health':
    get:
      security: []
      tags: [health]
      summary: Allgemeiner Healthcheck.
      description: >-
        Dieser muss ohne Autorisierung aufrufbar sein. Die Minimalanforderung ist ein {status: 'UP'} 
        wenn der Service gerufen werden kann.
      operationId: getHealthStatus
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthOkResponse"
              example:
                status: "UP"
        '503':
          description: Error - Meldung nur möglich, wenn Prüfung ausserhalb des Service erfolgt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthErrorResponse'
              example:
                status: "OUT_OF_SERVICE"
  '/occurences':
    put:
      operationId: putOccurences
      tags: [occurences]
      summary: Aktualisiert und liefert Offenlegung-Erfolgt-Daten zu einem Kunden-Datensatz zurück.
      description: >-
        Es soll nach OSP geschrieben werden, wann die Offenlegung erfolgt ist.
        Wenn der Berater die erforderlichen Unterlagen ausgewertet hat, 
        erfasst der Berater in der GUI das Datum der Auswertung der Unterlagen und
        die Art der eingereichten Dokumente. Diese Informationen sollen nach OSP geschrieben werden.
      parameters:
        - name: customerId
          in: query
          description: KUSA
          required: true
          schema:
            $ref: '#/components/schemas/CustomerId'
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/OccurenceRequest'
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/OccurenceResponse'
        '400':
          description: Bad Request
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/refusals':
    put:
      operationId: putRefusals
      tags: [refusals]
      summary: Aktualisiert und liefert Offenlegungspflicht-verweigert-Daten zu einem Kunden-Datensatz zurück.
      description: >-
        Es soll nach OSP ein GEKO geschrieben werden, wenn i.R. der Anforderung von Dokumenten der Kunde 
        die Einreichung generell verweigert. Verweigert der Kunde die Offenlegung seiner wirtschaftlichen Verhältnisse,
        soll dies in OSP geschrieben werden. Dafür gibt es bisher kein Kennzeichen. 
        Es wurde ein neuer GeKo bzw. eine neue Rolle angelegt -> X-OFFLEG. 
        Technische Beschreibung als erstes wird geprüft ob der Kunde bereits eine Verweigerung hat, 
        wenn ja -> diese wird ausgelesen und messageText: Verweigerung existiert bereits.
        wenn nein -> Verweigerung wird angelegt und danach ausgelesen, messageText: Verweigerung wurde angelegt.
      parameters:
        - name: customerId
          in: query
          description: KUSA
          required: true
          schema:
            $ref: '#/components/schemas/CustomerId'
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/RefusalRequest'
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/RefusalResponse'
        '400':
          description: Bad Request
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/requirements':
    put:
      operationId: putRequirements
      tags: [requirements]
      summary: Aktualisiert und liefert Offenlegungspflichtkennzeichen-Daten zu einem Kunden-Datensatz zurück.
      description: >- 
        Das Prüfergebnis aus der Offenlegungspflicht ist nach OSP zu schreiben. 
        Es sollen die Ergebnisse der Prüfung, ob der Kunde offenlegungspflichtig 
        ist nach OSP-§18 Anwendung geschrieben werden. Entweder, der Kunde ist offenlegungspflichtig 
        oder es wurden Ausnahmetatbestände ermittelt.
      parameters:
        - name: customerId
          in: query
          description: KUSA
          required: true
          schema:
            $ref: '#/components/schemas/CustomerId'
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/RequirementRequest'
      responses:
        '200':
          description: OK
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/RequirementResponse'
        '400':
          description: Bad Request
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
security:
  - EsbAuthorization: []
    appId: []
components:
  schemas:
# OL Erfolgt - Unterlagen eingereicht
    OccurenceRequest:
      type: object
      required:
      - data
      properties:
        data:
          $ref: '#/components/schemas/Occurence'
    OccurenceResponse:
      type: object
      required:
      - data
      properties:
        data:
          $ref: '#/components/schemas/Occurence'
    Occurence:
      type: object
      description: Offenlegungspflicht Erfolgt.
      required:
      - type
      - attributes
      properties:
        type:
          type: string
          description: Objekt Type
          enum:
            - occurences
          example: occurences
        id:
          type: string
          description: >-
            Eindeutiger Schlüssel. Optional wenn im RequestBody. Base64 encodierter ID-Timestamp.
          example: MDAwMS0wMS0wMS0wMC4wMC4wMC4wMDAwMDA
        attributes:
          type: object
          required:
          - date
          - documentType
          properties:
            date:
              type: string
              description: Datum an dem die Offenlegung erfolgt ist. Nach ISO8601 Format.
              example: '2019-04-13'
              format: date-time
            documentType:
              description: Unterlagen Art wie im KWG18_UNTERL_DEF_ANLEGEN beschrieben.
              type: string
              enum: ['0001','0002','0003','0004','0005','0006','0007','0008','0009','0010',
                     '0011','0012','0013','0014','0015','0016','0017','0018','0019','0020',
                     '0021','0022','0023','0024','0025','0026','0027']
              example: '0001'
# OL Verweigerung schreiben   
    RefusalRequest:
      type: object
      required:
      - data
      properties:
        data:
          $ref: '#/components/schemas/Refusal'
    RefusalResponse:
      type: object
      required:
      - data
      properties:
        data:
          $ref: '#/components/schemas/Refusal'
    Refusal:
      type: object
      description: Offenlegungspflicht Verweigerung.
      required:
      - type
      - attributes
      properties:
        type:
          type: string
          description: Objekt Type
          enum:
            - refusals
          example: refusals
        id:
          type: string
          description: >-
            Eindeutiger Schlüssel des GeKos bzw. der Verweigerung.
            Optional wenn im RequestBody. Base64 encodierter ID-Timestamp.
          example: MDAwMS0wMS0wMS0wMC4wMC4wMC4wMDAwMDA
        attributes:
          type: object
          required:
          - dateOfRefusal
          properties:
            dateOfRefusal:
              type: string
              description: >- 
               Verweigerung erfolgt am Datum. Mussfeld wenn im RequestBody. 
               Alleine das Datum und kein DateTime, werden als Ausgabe dargestellt
               und als Eingabe akzeptiert. Datum nach ISO8601 Format.
              example: '2020-02-22'
              format: date-time
            dateValidTo:
              type: string
              description: Verweigerung gültig bis Timestamp, nach ISO8601 Format. Optional im RequestBody.
              example: '9999-12-31T23:59:59.999+01:00'
              format: date-time
            messageText:
              type: string
              description: >- 
                Meldungstext ob die Anlage durchgeführt wurde oder ob die Verweigerung existierte bereits. 
                Optionales Feld wenn Refusal-Objekt als Eingabeparameter fungiert.
              example: 'Die Verweigerung existiert bereits.'
# OL Pflicht schreiben
    RequirementRequest:
      type: object
      required:
      - data
      properties:
        data:
          $ref: '#/components/schemas/Requirement'
    RequirementResponse:
      type: object
      required:
      - data
      properties:
        data:
          $ref: '#/components/schemas/Requirement'
    Requirement:
      type: object
      description: Offenlegungspflichtkennzeichen.
      required:
      - type
      - attributes
      properties:
        type:
          type: string
          description: Objekt Type
          enum:
            - requirements
          example: requirements
        id:
          type: string
          description: >-
            Eindeutiger Schlüssel. Optional wenn im RequestBody. Base64 encodierter ID-Timestamp.
          example: MDAwMS0wMS0wMS0wMC4wMC4wMC4wMDAwMDA
        attributes:
          type: object
          required:
          - disclosureRequirement
          - dateValidFrom
          - dateValidTo
          - exceptionReason
          properties:
            disclosureRequirement:
              type: boolean
              description: Offenlegungspflicht Aktiv-KZ Ja-Aktiv/Nein-Inaktiv.
              example: true
            dateValidFrom:
              type: string
              description: Datum gültig ab nach ISO8601 Format.
              example: '2019-04-13'
              format: date-time
            dateValidTo:
              type: string
              description: Datum gültig bis nach ISO8601 Format.
              example: '2019-04-13'
              format: date-time
            exceptionReason:
              type: string
              description: Ausnahmetatbestand Grund
              example: Ausnahmetatbestand_Grund
    CustomerId:
      type: string
      maxLength: 10
      pattern: '\d{1,10}'
      example: '43525748'
    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/JsonApiError'
    JsonApiError:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
        code:
          type: string
        title:
          type: string
        detail:
          type: string
    # HealthCheck analog zu SpringBoot
    HealthOkResponse:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - UP
        components:
          type: object
    HealthErrorResponse:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - OUT_OF_SERVICE
        components:
          type: object
  securitySchemes:
    EsbAuthorization:
      type: http
      scheme: basic
    appId:
      type: apiKey
      in: header
      name: x-app-id
      description: Applikationskürzel zum FIA-User (wird zur Zuordnung des Client benutzt)
